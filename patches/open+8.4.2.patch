diff --git a/node_modules/open/index.js b/node_modules/open/index.js
index f66dc4c..af80ae7 100644
--- a/node_modules/open/index.js
+++ b/node_modules/open/index.js
@@ -89,6 +89,7 @@ const pTryEach = async (array, mapper) => {
 };
 
 const baseOpen = async options => {
+	console.log("DEBUG baseOpen called with", options);
 	options = {
 		wait: false,
 		background: false,
@@ -139,7 +140,8 @@ const baseOpen = async options => {
 		if (app) {
 			cliArguments.push('-a', app);
 		}
-	} else if (platform === 'win32' || (isWsl && !isInsideContainer() && !app)) {
+	} else if (platform === 'win32' || (isWsl && !isInsideContainer() && !app)) {
+		console.log("DEBUG baseOpen in windows WSL", app);
 		const mountPoint = await getWslDrivesMountPoint();
 
 		command = isWsl ?
@@ -180,6 +182,7 @@ const baseOpen = async options => {
 			encodedArguments.push(appArguments.join(','));
 		}
 
+		console.log("DEBUG win32 final args", encodedArguments)
 		// Using Base64-encoded command, accepted by PowerShell, to allow special characters.
 		options.target = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');
 	} else {
@@ -211,6 +214,7 @@ const baseOpen = async options => {
 			childProcessOptions.stdio = 'ignore';
 			childProcessOptions.detached = true;
 		}
+		console.log("DEBUG linux final args", cliArguments)
 	}
 
 	if (options.target) {
@@ -221,6 +225,7 @@ const baseOpen = async options => {
 		cliArguments.push('--args', ...appArguments);
 	}
 
+	console.log("DEBUG spawning childprocess, command: ", command, "cli args", cliArguments, "child proces opts", childProcessOptions)
 	const subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);
 
 	if (options.wait) {
@@ -255,9 +260,11 @@ const open = (target, options) => {
 };
 
 const openApp = (name, options) => {
-	if (typeof name !== 'string') {
-		throw new TypeError('Expected a `name`');
-	}
+	console.log("DEBUG openApp called with", name, options)
+	// if (typeof name !== 'string') {
+	// 	console.error("DEBUG name type is", typeof name)
+	// 	throw new TypeError('Expected a `name`');
+	// }
 
 	const {arguments: appArguments = []} = options || {};
 	if (appArguments !== undefined && appArguments !== null && !Array.isArray(appArguments)) {
